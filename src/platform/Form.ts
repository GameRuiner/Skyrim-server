import * as skyrimPlatform from './skyrimPlatform';
import { Actor } from './Actor';
import { ObjectReference } from './ObjectReference';
import { Keyword } from './Keyword';

export interface Form {
	from(form: Form): Form;
	getFormID(): number;
	getGoldValue(): number;
	getKeywords(): object[];
	getName(): string;
	getNthKeyword(index: number): Keyword;
	getNumKeywords(): number;
	getType(): number;
	getWeight(): number;
	getWorldModelNthTextureSet(n: number): skyrimPlatform.TextureSet;
	getWorldModelNumTextureSets(): number;
	getWorldModelPath(): string;
	hasKeyword(akKeyword: Keyword): boolean;
	hasWorldModel(): boolean;
	isPlayable(): boolean;
	playerKnows(): boolean;
	registerForActorAction(actionType: number): void;
	registerForAnimationEvent(akSender: ObjectReference, asEventName: string): boolean;
	registerForCameraState(): void;
	registerForControl(control: string): void;
	registerForCrosshairRef(): void;
	registerForKey(keyCode: number): void;
	registerForLOS(akViewer: Actor, akTarget: ObjectReference): void;
	registerForMenu(menuName: string): void;
	registerForModEvent(eventName: string, callbackName: string): void;
	registerForNiNodeUpdate(): void;
	registerForSingleLOSGain(akViewer: Actor, akTarget: ObjectReference): void;
	registerForSingleLOSLost(akViewer: Actor, akTarget: ObjectReference): void;
	registerForSingleUpdate(afInterval: number): void;
	registerForSingleUpdateGameTime(afInterval: number): void;
	registerForSleep(): void;
	registerForTrackedStatsEvent(): void;
	registerForUpdate(afInterval: number): void;
	registerForUpdateGameTime(afInterval: number): void;
	sendModEvent(eventName: string, strArg: string, numArg: number): void;
	setGoldValue(value: number): void;
	setName(name: string): void;
	setPlayerKnows(knows: boolean): void;
	setWeight(weight: number): void;
	setWorldModelNthTextureSet(nSet: skyrimPlatform.TextureSet, n: number): void;
	setWorldModelPath(path: string): void;
	startObjectProfiling(): void;
	stopObjectProfiling(): void;
	tempClone(): Form;
	unregisterForActorAction(actionType: number): void;
	unregisterForAllControls(): void;
	unregisterForAllKeys(): void;
	unregisterForAllMenus(): void;
	unregisterForAllModEvents(): void;
	unregisterForAnimationEvent(akSender: ObjectReference, asEventName: string): void;
	unregisterForCameraState(): void;
	unregisterForControl(control: string): void;
	unregisterForCrosshairRef(): void;
	unregisterForKey(keyCode: number): void;
	unregisterForLOS(akViewer: Actor, akTarget: ObjectReference): void;
	unregisterForMenu(menuName: string): void;
	unregisterForModEvent(eventName: string): void;
	unregisterForNiNodeUpdate(): void;
	unregisterForSleep(): void;
	unregisterForTrackedStatsEvent(): void;
	unregisterForUpdate(): void;
	unregisterForUpdateGameTime(): void;
}
